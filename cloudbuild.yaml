steps:
  # Docker Build
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 
           'europe-central2-docker.pkg.dev/YOUR_PROJECT/YOUR_ARTIFACT_REGISTRY/myapp', 
           '.']

  # Docker Push
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 
           'europe-central2-docker.pkg.dev/YOUR_PROJECT/YOUR_ARTIFACT_REGISTRY/myapp']
           
  # #Deploy to Cloud Run as new service. If not a new service, then deploy with 0$ traffic, health check and split
  - name: 'gcr.io/cloud-builders/gsutil'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      gcloud run deploy cloudrunservice --image europe-central2-docker.pkg.dev/vlad-test-ground/vlad-test-1/myapp \
        --region europe-central2 --platform managed --allow-unauthenticated --no-traffic --ingress internal-and-cloud-load-balancing \
        || gcloud run deploy cloudrunservice --image europe-central2-docker.pkg.dev/vlad-test-ground/vlad-test-1/myapp \
        --region europe-central2 --platform managed --allow-unauthenticated --ingress internal-and-cloud-load-balancing    

  # Health Check  
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'health-check'
    script: |
      curl --fail "http://MySQL_DB_IP/health"

  # Split 50% if health check passed
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'split-traffic'
    script: |
      NEW_REVISION=$(gcloud run services describe cloudrunservice \
        --region=europe-central2 --format="value(status.latestCreatedRevisionName)")
      OLD_REVISION=$(gcloud run services describe cloudrunservice \
        --region=europe-central2 \
        --format="value(status.traffic[0].revisionName)")

      echo "Splitting traffic between $OLD_REVISION and $NEW_REVISION"

      gcloud run services update-traffic cloudrunservice \
        --region=europe-central2 \
        --platform managed \
        --to-revisions ${OLD_REVISION}=50,${NEW_REVISION}=50

images:
  - 'europe-central2-docker.pkg.dev/YOUR_PROJECT/YOUR_ARTIFACT_REGISTRY/myapp:latest'
